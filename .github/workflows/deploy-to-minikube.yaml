name: CI/CD Pipeline for Backend Deployment

on:
  push:
    branches:
      - main  # Change this to your main branch name

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Install Minikube and kubectl
      - name: Install Minikube and kubectl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube /usr/local/bin/
          minikube version
          curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
          sudo install kubectl /usr/local/bin/
          kubectl version --client

      # Start Minikube with Docker driver
      - name: Start Minikube
        run: |
          minikube start --driver=docker --kubernetes-version=v1.23.0
          minikube status

      # Set Docker environment to Minikube
      - name: Set Docker environment to Minikube
        run: eval $(minikube -p minikube docker-env)

      # Load Database Image
      - name: Load Database Image
        run: |
          docker pull postgres:latest
          docker tag postgres:latest postgres:latest
          minikube cache add postgres:latest

      # Start PostgreSQL Deployment and Service
      - name: Deploy PostgreSQL to Minikube
        run: |
          kubectl apply -f k8s/db-deployment.yaml
          kubectl apply -f k8s/db-service.yaml

      # Wait for PostgreSQL deployment to be ready
      - name: Wait for PostgreSQL deployment
        run: |
          kubectl rollout status deployment/postgres-deployment --timeout=1m

      # Build Backend Docker image
      - name: Build Backend Docker image
        run: docker build -t assignment-backend:latest backend

      # Save Backend Docker image to tar
      - name: Save Backend Docker image to tar
        run: docker image save -o assignment-backend.tar assignment-backend:latest

      # Load Backend Docker image to Minikube
      - name: Load Backend Docker image to Minikube
        run: minikube image load assignment-backend.tar

        # Verify the image in Minikube
      - name: Verify Backend Docker image in Minikube
        run: |
          docker images | grep assignment-backend

      # Deploy Backend to Minikube
      - name: Deploy Backend to Minikube
        run: |
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/backend-service.yaml

      # Wait for Backend deployment to be ready
      - name: Wait for Backend deployment
        run: |
          kubectl rollout status deployment/backend-deployment --timeout=1m

       # Wait for 25 seconds
      - name: Wait for 25 seconds
        run: sleep 25

     # Log into running pod
      - name: Log into running pod
        run: |
          POD_NAME=$(kubectl get pod -l app=backend -o jsonpath="{.items[0].metadata.name}")
          echo "Logging into pod: $POD_NAME"
          kubectl logs $POD_NAME

       # Test /departments endpoint
      - name: Test /departments endpoint
        run: |
          POD_NAME=$(kubectl get pod -l app=backend -o jsonpath="{.items[0].metadata.name}")
          kubectl exec -it $POD_NAME -- /bin/bash -c 'apt-get update && apt-get install curl -y && curl http://localhost:8080/departments'
        id: test_departments

      # Retry /departments endpoint if the first attempt failed
      - name: Retry /departments endpoint if failed
        if: ${{ steps.test_departments.outcome == 'failure' }}
        run: |
          echo "Retrying /departments endpoint..."
          sleep 2
          POD_NAME=$(kubectl get pod -l app=backend -o jsonpath="{.items[0].metadata.name}")
          kubectl exec -it $POD_NAME -- /bin/bash 
          curl -X POST -H "Content-Type: application/text" -d "Abs" http://backend-service.default:8080/departments

      - name: Test /stories endpoint
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
                  "headline": "Cool story",
                  "content": "Really cool story",
                  "departmentId": 1
                }' http://127.0.0.1:8080/stories

      # Clean up Docker images (optional)
      - name: Clean up Docker images
        run: docker system prune -af

      # Stop Minikube
      - name: Stop Minikube
        run: minikube stop

      # D
